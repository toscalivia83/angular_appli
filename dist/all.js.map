{"version":3,"sources":["app.js","button/button.js","combobox/combobox.js","comment/comment.js","custom-textarea/custom-textarea.js","custom-input/custom-input.js","header-link/header-link.js","header/header.js","input-duration/input-duration.js","list-poste-da/list-poste-da.js","loader/loader.js","input-poste-da/input-poste-da.js","radiolist-problems/radiolist-problems.js","general_config.js","messages_config.js","routes.js","translate.js","AllProblemsController.js","PosteDaController.js","ProblemsController.js","ProblemsTypeController.js","CheckNumberService.js","CsvService.js","PosteDaService.js","ProblemsService.js","ProblemsTypeService.js","TimeService.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"all.js","sourcesContent":["(function () {\n  'use strict'\n\n  angular.module('ProblemsTest', ['ngRoute', 'ngSanitize', 'ngCsv', 'pascalprecht.translate'])\n})();// eslint-disable-line semi\n","(function () {\n  'use strict'\n  var module = angular.module('ProblemsTest')\n\n  module.directive('myButton', ['CheckNumberService',\n    function (CheckNumberService) {\n      return {\n        restrict: 'E',\n        scope: {\n          onclick: '=onclick',\n          label: '@btnLabel'\n        },\n        controller: ['$scope', function ($scope) {\n\n        }],\n        templateUrl: '/component/button/button.html',\n        link: function ($scope, element, attributes) {\n          if (CheckNumberService.isNormalInteger(attributes.btnWidth) === true) {\n            var buttonFirstChild = element.children(0).children(0)\n            var btnWidth = attributes.btnWidth + 'px'\n\n            buttonFirstChild.css('width', btnWidth)\n          } else {\n            var buttonSecondChild = element.children(0).children(0)\n            buttonSecondChild.css('padding', '15px')\n          }\n\n          if (CheckNumberService.isNormalInteger(attributes.btnHeight) === true) {\n            var buttonFirstChildHeight = element.children(0).children(0)\n            var btnHeight = attributes.btnHeight + 'px'\n\n            buttonFirstChildHeight.css('height', btnHeight)\n          } else {\n            var buttonSecondChildHeight = element.children(0).children(0)\n            buttonSecondChildHeight.css('padding', '15px')\n          }\n        }\n      }\n    }\n  ])\n})();// eslint-disable-line semi\n","(function () {\n  'use strict'\n  var module = angular.module('ProblemsTest')\n\n  module.directive('myComboboxPosteDa', [function () {\n    return {\n      restrict: 'E',\n      scope: {\n        postesDa: '=postesDa',\n        label: '@label',\n        val: '=val'\n      },\n      templateUrl: '/component/combobox/combobox.html'\n    }\n  }])\n})();// eslint-disable-line semi\n\n","(function () {\n  'use strict'\n  var module = angular.module('ProblemsTest')\n\n  module.directive('myComment', [\n    function () {\n      return {\n        restrict: 'E',\n        scope: {\n          comment: '=enterNewComment'\n        },\n        templateUrl: '/component/comment/comment.html'\n      }\n    }\n  ])\n})();// eslint-disable-line semi\n","(function () {\n  'use strict'\n  var module = angular.module('ProblemsTest')\n\n  module.directive('myCustomTextarea', ['CheckNumberService',\n    function (CheckNumberService) {\n      return {\n        restrict: 'E',\n        scope: {\n          val: '=val',\n          label: '@label',\n          fct: '=fct'\n        },\n        templateUrl: '/component/custom-textarea/custom-textarea.html',\n        link: function ($scope, element, attributes) {\n          if (CheckNumberService.isNormalInteger(attributes.btnWidth) === true) {\n            var buttonFirstChild = element.children(0)\n            var btnWidth = attributes.btnWidth + 'px'\n\n            buttonFirstChild.css('width', btnWidth)\n          } else {\n            var buttonSecondChild = element.children(0)\n            buttonSecondChild.css('width', '350px')\n          }\n\n          if (CheckNumberService.isNormalInteger(attributes.btnHeight) === true) {\n            var buttonFirstChildHeight = element.children(0)\n            var btnHeight = attributes.btnHeight + 'px'\n\n            buttonFirstChildHeight.css('height', btnHeight)\n          } else {\n            var buttonSecondChildHeight = element.children(0)\n            buttonSecondChildHeight.css('height', '150px')\n          }\n        }\n      }\n    }\n  ])\n})();// eslint-disable-line semi\n","(function () {\n  'use strict'\n  var module = angular.module('ProblemsTest')\n\n  module.directive('myCustomInput', [\n    function () {\n      return {\n        restrict: 'E',\n        scope: {\n          val: '=val',\n          label: '@label',\n          fct: '=fct',\n          placeholder: '@placeholder'\n        },\n        templateUrl: '/component/custom-input/custom-input.html'\n      }\n    }\n  ])\n})();// eslint-disable-line semi\n","(function () {\n  'use strict'\n  var module = angular.module('ProblemsTest')\n\n  module.directive('myHeaderLink', [\n    function () {\n      return {\n        restrict: 'E',\n        scope: {\n          val: '=val',\n          label: '@label',\n          url: '@url'\n        },\n        templateUrl: '/component/header-link/header-link.html'\n      }\n    }\n  ])\n})();// eslint-disable-line semi\n","(function () {\n  'use strict'\n  var module = angular.module('ProblemsTest')\n\n  module.directive('myHeader', [\n    function () {\n      return {\n        restrict: 'E',\n        templateUrl: 'component/header/header.html',\n        scope: {\n          headerTitle: '@headerTitle',\n          pathHeader: '@pathHeader'\n        },\n        controller: ['$scope', '$location', 'serverConnexion', function ($scope, $location, serverConnexion) {\n          var ressourceNameRetrieveCsv = 'CSV'\n          $scope.csvUrl = 'http://' + serverConnexion.server + ':' + serverConnexion.port + '/' + ressourceNameRetrieveCsv\n          $scope.valposteda = false\n          $scope.valproblems = false\n          $scope.valcsv = false\n          if ($location.path() === '/poste-da') {\n            $scope.valposteda = true\n          }\n            /* if ($location.path() === '/all-problems') {\n              valallproblems = true\n            }*/\n          if ($location.path() === '/') {\n            $scope.valproblems = true\n          }\n            /* if ($location.path() === '/all-problems') {\n              valallproblems = true\n            }*/\n          // }\n          // if($location.path)\n        }],\n        link: function ($scope, element, attributes) {\n\n        }\n      }\n    }\n  ])\n})();// eslint-disable-line semi\n","(function () {\n  'use strict'\n  var module = angular.module('ProblemsTest')\n\n  module.directive('myDuration', [\n    function () {\n      return {\n        restrict: 'E',\n        scope: {\n          duration: '=problemsTypeDuree',\n          setvalue: '=setvalue'\n        },\n        controller: ['$scope', 'TimeService', function ($scope, TimeService) {\n          $scope.setvalue = function (duration) {\n            $scope.unit = TimeService.getTimeUnit(duration)\n            $scope.displaytime = TimeService.computeDisplayTime(duration, $scope.unit)\n          }\n\n          $scope.computetime = function (value) {\n            $scope.duration = TimeService.convertInMs(value, $scope.unit)\n            return $scope.duration\n          }\n\n          $scope.checknumber = function (e) {\n            if (!TimeService.keyisvalid(e.key)) {\n              e.preventDefault()\n            }\n          }\n        }],\n        templateUrl: '/component/input-duration/input-duration.html'\n      }\n    }\n  ])\n})();// eslint-disable-line semi\n","(function () {\n  'use strict'\n  var module = angular.module('ProblemsTest')\n\n  module.directive('myPostesDa', [function () {\n    return {\n      restrict: 'E',\n      scope: {\n        postesDa: '=postesDa',\n        ondelete: '=ondelete',\n        itemId: '=idvalue'\n      },\n      templateUrl: '/component/list-poste-da/list-poste-da.html'\n    }\n  }])\n})();// eslint-disable-line semi\n","(function () {\n  'use strict'\n  var module = angular.module('ProblemsTest')\n\n  module.directive('myLoader', [\n    function () {\n      {\n        (function () {\n          var rebound = {}\n          var util = rebound.util = {}\n          var concat = Array.prototype.concat\n          var slice = Array.prototype.slice\n\n          // Bind a function to a context object.\n          util.bind = function bind (func, context) {\n            var args = slice.call(arguments, 2)\n            return function () {\n              func.apply(context, concat.call(args, slice.call(arguments)))\n            }\n          }\n\n          // Add all the properties in the source to the target.\n          util.extend = function extend (target, source) {\n            for (var key in source) {\n              if (source.hasOwnProperty(key)) {\n                target[key] = source[key]\n              }\n            }\n          }\n\n          // SpringSystem\n          // ------------\n          // **SpringSystem** is a set of Springs that all run on the same physics\n          // timing loop. To get started with a Rebound animation you first\n          // create a new SpringSystem and then add springs to it.\n          var SpringSystem = rebound.SpringSystem = function SpringSystem (looper) {\n            this._springRegistry = {}\n            this._activeSprings = []\n            this.listeners = []\n            this._idleSpringIndices = []\n            this.looper = looper || new AnimationLooper()\n            this.looper.springSystem = this\n          }\n\n          util.extend(SpringSystem.prototype, {\n\n            _springRegistry: null,\n\n            _isIdle: true,\n\n            _lastTimeMillis: -1,\n\n            _activeSprings: null,\n\n            listeners: null,\n\n            _idleSpringIndices: null,\n\n            // A SpringSystem is iterated by a looper. The looper is responsible\n            // for executing each frame as the SpringSystem is resolved to idle.\n            // There are three types of Loopers described below AnimationLooper,\n            // SimulationLooper, and SteppingSimulationLooper. AnimationLooper is\n            // the default as it is the most useful for common UI animations.\n            setLooper: function setLooper (looper) {\n              this.looper = looper\n              looper.springSystem = this\n            },\n\n            // Add a new spring to this SpringSystem. This Spring will now be solved for\n            // during the physics iteration loop. By default the spring will use the\n            // default Origami spring config with 40 tension and 7 friction, but you can\n            // also provide your own values here.\n            createSpring: function createSpring (tension, friction) {\n              var springConfig\n              if (tension === undefined || friction === undefined) {\n                springConfig = SpringConfig.DEFAULT_ORIGAMI_SPRING_CONFIG\n              } else {\n                springConfig = SpringConfig.fromOrigamiTensionAndFriction(tension, friction)\n              }\n              return this.createSpringWithConfig(springConfig)\n            },\n\n            // Add a spring with a specified bounciness and speed. To replicate Origami\n            // compositions based on PopAnimation patches, use this factory method to\n            // create matching springs.\n            createSpringWithBouncinessAndSpeed: function createSpringWithBouncinessAndSpeed (bounciness, speed) {\n              var springConfig\n              if (bounciness === undefined || speed === undefined) {\n                springConfig = SpringConfig.DEFAULT_ORIGAMI_SPRING_CONFIG\n              } else {\n                springConfig = SpringConfig.fromBouncinessAndSpeed(bounciness, speed)\n              }\n              return this.createSpringWithConfig(springConfig)\n            },\n\n            // Add a spring with the provided SpringConfig.\n            createSpringWithConfig: function createSpringWithConfig (springConfig) {\n              var spring = new Spring(this)\n              this.registerSpring(spring)\n              spring.setSpringConfig(springConfig)\n              return spring\n            },\n\n            // You can check if a SpringSystem is idle or active by calling\n            // getIsIdle. If all of the Springs in the SpringSystem are at rest,\n            // i.e. the physics forces have reached equilibrium, then this\n            // method will return true.\n            getIsIdle: function getIsIdle () {\n              return this._isIdle\n            },\n\n            // Retrieve a specific Spring from the SpringSystem by id. This\n            // can be useful for inspecting the state of a spring before\n            // or after an integration loop in the SpringSystem executes.\n            getSpringById: function getSpringById (id) {\n              return this._springRegistry[id]\n            },\n\n            // Get a listing of all the springs registered with this\n            // SpringSystem.\n            getAllSprings: function getAllSprings () {\n              var vals = []\n              for (var id in this._springRegistry) {\n                if (this._springRegistry.hasOwnProperty(id)) {\n                  vals.push(this._springRegistry[id])\n                }\n              }\n              return vals\n            },\n\n            // registerSpring is called automatically as soon as you create\n            // a Spring with SpringSystem#createSpring. This method sets the\n            // spring up in the registry so that it can be solved in the\n            // solver loop.\n            registerSpring: function registerSpring (spring) {\n              this._springRegistry[spring.getId()] = spring\n            },\n\n            // Deregister a spring with this SpringSystem. The SpringSystem will\n            // no longer consider this Spring during its integration loop once\n            // this is called. This is normally done automatically for you when\n            // you call Spring#destroy.\n            deregisterSpring: function deregisterSpring (spring) {\n              removeFirst(this._activeSprings, spring)\n              delete this._springRegistry[spring.getId()]\n            },\n\n            advance: function advance (time, deltaTime) {\n              while (this._idleSpringIndices.length > 0) {\n                this._idleSpringIndices.pop()\n              } for (var i = 0, len = this._activeSprings.length; i < len; i++) {\n                var spring = this._activeSprings[i]\n                if (spring.systemShouldAdvance()) {\n                  spring.advance(time / 1000.0, deltaTime / 1000.0)\n                } else {\n                  this._idleSpringIndices.push(this._activeSprings.indexOf(spring))\n                }\n              }\n              while (this._idleSpringIndices.length > 0) {\n                var idx = this._idleSpringIndices.pop()\n                idx >= 0 && this._activeSprings.splice(idx, 1)\n              }\n            },\n\n            // This is our main solver loop called to move the simulation\n            // forward through time. Before each pass in the solver loop\n            // onBeforeIntegrate is called on an any listeners that have\n            // registered themeselves with the SpringSystem. This gives you\n            // an opportunity to apply any constraints or adjustments to\n            // the springs that should be enforced before each iteration\n            // loop. Next the advance method is called to move each Spring in\n            // the systemShouldAdvance forward to the current time. After the\n            // integration step runs in advance, onAfterIntegrate is called\n            // on any listeners that have registered themselves with the\n            // SpringSystem. This gives you an opportunity to run any post\n            // integration constraints or adjustments on the Springs in the\n            // SpringSystem.\n            loop: function loop (currentTimeMillis) {\n              var listener\n              if (this._lastTimeMillis === -1) {\n                this._lastTimeMillis = currentTimeMillis - 1\n              }\n              var ellapsedMillis = currentTimeMillis - this._lastTimeMillis\n              this._lastTimeMillis = currentTimeMillis\n\n              var i = 0\n              var len = this.listeners.length\n              for (i = 0; i < len; i++) {\n                listener = this.listeners[i]\n                listener.onBeforeIntegrate && listener.onBeforeIntegrate(this)\n              }\n\n              this.advance(currentTimeMillis, ellapsedMillis)\n              if (this._activeSprings.length === 0) {\n                this._isIdle = true\n                this._lastTimeMillis = -1\n              }\n\n              for (i = 0; i < len; i++) {\n                listener = this.listeners[i]\n                listener.onAfterIntegrate && listener.onAfterIntegrate(this)\n              }\n\n              if (!this._isIdle) {\n                this.looper.run()\n              }\n            },\n\n            // activateSpring is used to notify the SpringSystem that a Spring\n            // has become displaced. The system responds by starting its solver\n            // loop up if it is currently idle.\n            activateSpring: function activateSpring (springId) {\n              var spring = this._springRegistry[springId]\n              if (this._activeSprings.indexOf(spring) === -1) {\n                this._activeSprings.push(spring)\n              }\n              if (this.getIsIdle()) {\n                this._isIdle = false\n                this.looper.run()\n              }\n            },\n\n            // Add a listener to the SpringSystem so that you can receive\n            // before/after integration notifications allowing Springs to be\n            // constrained or adjusted.\n            addListener: function addListener (listener) {\n              this.listeners.push(listener)\n            },\n\n            // Remove a previously added listener on the SpringSystem.\n            removeListener: function removeListener (listener) {\n              removeFirst(this.listeners, listener)\n            },\n\n            // Remove all previously added listeners on the SpringSystem.\n            removeAllListeners: function removeAllListeners () {\n              this.listeners = []\n            }\n\n          })\n\n          // Spring\n          // ------\n          // **Spring** provides a model of a classical spring acting to\n          // resolve a body to equilibrium. Springs have configurable\n          // tension which is a force multipler on the displacement of the\n          // spring from its rest point or `endValue` as defined by [Hooke's\n          // law](http://en.wikipedia.org/wiki/Hooke's_law). Springs also have\n          // configurable friction, which ensures that they do not oscillate\n          // infinitely. When a Spring is displaced by updating it's resting\n          // or `currentValue`, the SpringSystems that contain that Spring\n          // will automatically start looping to solve for equilibrium. As each\n          // timestep passes, `SpringListener` objects attached to the Spring\n          // will be notified of the updates providing a way to drive an\n          // animation off of the spring's resolution curve.\n          var Spring = rebound.Spring = function Spring (springSystem) {\n            this._id = 's' + Spring._ID++\n            this._springSystem = springSystem\n            this.listeners = []\n            this._currentState = new PhysicsState()\n            this._previousState = new PhysicsState()\n            this._tempState = new PhysicsState()\n          }\n\n          util.extend(Spring, {\n            _ID: 0,\n\n            MAX_DELTA_TIME_SEC: 0.064,\n\n            SOLVER_TIMESTEP_SEC: 0.001\n\n          })\n\n          util.extend(Spring.prototype, {\n\n            _id: 0,\n\n            _springConfig: null,\n\n            _overshootClampingEnabled: false,\n\n            _currentState: null,\n\n            _previousState: null,\n\n            _tempState: null,\n\n            _startValue: 0,\n\n            _endValue: 0,\n\n            _wasAtRest: true,\n\n            _restSpeedThreshold: 0.001,\n\n            _displacementFromRestThreshold: 0.001,\n\n            listeners: null,\n\n            _timeAccumulator: 0,\n\n            _springSystem: null,\n\n            // Remove a Spring from simulation and clear its listeners.\n            destroy: function destroy () {\n              this.listeners = []\n              this.frames = []\n              this._springSystem.deregisterSpring(this)\n            },\n\n            // Get the id of the spring, which can be used to retrieve it from\n            // the SpringSystems it participates in later.\n            getId: function getId () {\n              return this._id\n            },\n\n            // Set the configuration values for this Spring. A SpringConfig\n            // contains the tension and friction values used to solve for the\n            // equilibrium of the Spring in the physics loop.\n            setSpringConfig: function setSpringConfig (springConfig) {\n              this._springConfig = springConfig\n              return this\n            },\n\n            // Retrieve the SpringConfig used by this Spring.\n            getSpringConfig: function getSpringConfig () {\n              return this._springConfig\n            },\n\n            // Set the current position of this Spring. Listeners will be updated\n            // with this value immediately. If the rest or `endValue` is not\n            // updated to match this value, then the spring will be dispalced and\n            // the SpringSystem will start to loop to restore the spring to the\n            // `endValue`.\n            //\n            // A common pattern is to move a Spring around without animation by\n            // calling.\n            //\n            // ```\n            // spring.setCurrentValue(n).setAtRest();\n            // ```\n            //\n            // This moves the Spring to a new position `n`, sets the endValue\n            // to `n`, and removes any velocity from the `Spring`. By doing\n            // this you can allow the `SpringListener` to manage the position\n            // of UI elements attached to the spring even when moving without\n            // animation. For example, when dragging an element you can\n            // update the position of an attached view through a spring\n            // by calling `spring.setCurrentValue(x)`. When\n            // the gesture ends you can update the Springs\n            // velocity and endValue\n            // `spring.setVelocity(gestureEndVelocity).setEndValue(flingTarget)`\n            // to cause it to naturally animate the UI element to the resting\n            // position taking into account existing velocity. The codepaths for\n            // synchronous movement and spring driven animation can\n            // be unified using this technique.\n            setCurrentValue: function setCurrentValue (currentValue, skipSetAtRest) {\n              this._startValue = currentValue\n              this._currentState.position = currentValue\n              if (!skipSetAtRest) {\n                this.setAtRest()\n              }\n              this.notifyPositionUpdated(false, false)\n              return this\n            },\n\n            // Get the position that the most recent animation started at. This\n            // can be useful for determining the number off oscillations that\n            // have occurred.\n            getStartValue: function getStartValue () {\n              return this._startValue\n            },\n\n            // Retrieve the current value of the Spring.\n            getCurrentValue: function getCurrentValue () {\n              return this._currentState.position\n            },\n\n            // Get the absolute distance of the Spring from it's resting endValue\n            // position.\n            getCurrentDisplacementDistance: function getCurrentDisplacementDistance () {\n              return this.getDisplacementDistanceForState(this._currentState)\n            },\n\n            getDisplacementDistanceForState: function getDisplacementDistanceForState (state) {\n              return Math.abs(this._endValue - state.position)\n            },\n\n            // Set the endValue or resting position of the spring. If this\n            // value is different than the current value, the SpringSystem will\n            // be notified and will begin running its solver loop to resolve\n            // the Spring to equilibrium. Any listeners that are registered\n            // for onSpringEndStateChange will also be notified of this update\n            // immediately.\n            setEndValue: function setEndValue (endValue) {\n              if (this._endValue === endValue && this.isAtRest()) {\n                return this\n              }\n              this._startValue = this.getCurrentValue()\n              this._endValue = endValue\n              this._springSystem.activateSpring(this.getId())\n              for (var i = 0, len = this.listeners.length; i < len; i++) {\n                var listener = this.listeners[i]\n                var onChange = listener.onSpringEndStateChange\n                onChange && onChange(this)\n              }\n              return this\n            },\n\n            // Retrieve the endValue or resting position of this spring.\n            getEndValue: function getEndValue () {\n              return this._endValue\n            },\n\n            // Set the current velocity of the Spring. As previously mentioned,\n            // this can be useful when you are performing a direct manipulation\n            // gesture. When a UI element is released you may call setVelocity\n            // on its animation Spring so that the Spring continues with the\n            // same velocity as the gesture ended with. The friction, tension,\n            // and displacement of the Spring will then govern its motion to\n            // return to rest on a natural feeling curve.\n            setVelocity: function setVelocity (velocity) {\n              if (velocity === this._currentState.velocity) {\n                return this\n              }\n              this._currentState.velocity = velocity\n              this._springSystem.activateSpring(this.getId())\n              return this\n            },\n\n            // Get the current velocity of the Spring.\n            getVelocity: function getVelocity () {\n              return this._currentState.velocity\n            },\n\n            // Set a threshold value for the movement speed of the Spring below\n            // which it will be considered to be not moving or resting.\n            setRestSpeedThreshold: function setRestSpeedThreshold (restSpeedThreshold) {\n              this._restSpeedThreshold = restSpeedThreshold\n              return this\n            },\n\n            // Retrieve the rest speed threshold for this Spring.\n            getRestSpeedThreshold: function getRestSpeedThreshold () {\n              return this._restSpeedThreshold\n            },\n\n            // Set a threshold value for displacement below which the Spring\n            // will be considered to be not displaced i.e. at its resting\n            // `endValue`.\n            setRestDisplacementThreshold: function setRestDisplacementThreshold (displacementFromRestThreshold) {\n              this._displacementFromRestThreshold = displacementFromRestThreshold\n            },\n\n            // Retrieve the rest displacement threshold for this spring.\n            getRestDisplacementThreshold: function getRestDisplacementThreshold () {\n              return this._displacementFromRestThreshold\n            },\n\n            // Enable overshoot clamping. This means that the Spring will stop\n            // immediately when it reaches its resting position regardless of\n            // any existing momentum it may have. This can be useful for certain\n            // types of animations that should not oscillate such as a scale\n            // down to 0 or alpha fade.\n            setOvershootClampingEnabled: function setOvershootClampingEnabled (enabled) {\n              this._overshootClampingEnabled = enabled\n              return this\n            },\n\n            // Check if overshoot clamping is enabled for this spring.\n            isOvershootClampingEnabled: function isOvershootClampingEnabled () {\n              return this._overshootClampingEnabled\n            },\n\n            // Check if the Spring has gone past its end point by comparing\n            // the direction it was moving in when it started to the current\n            // position and end value.\n            isOvershooting: function isOvershooting () {\n              var start = this._startValue\n              var end = this._endValue\n              return this._springConfig.tension > 0 && (start < end && this.getCurrentValue() > end || start > end && this.getCurrentValue() < end)\n            },\n\n            // Spring.advance is the main solver method for the Spring. It takes\n            // the current time and delta since the last time step and performs\n            // an RK4 integration to get the new position and velocity state\n            // for the Spring based on the tension, friction, velocity, and\n            // displacement of the Spring.\n            advance: function advance (time, realDeltaTime) {\n              var isAtRest = this.isAtRest()\n\n              if (isAtRest && this._wasAtRest) {\n                return\n              }\n\n              var adjustedDeltaTime = realDeltaTime\n              if (realDeltaTime > Spring.MAX_DELTA_TIME_SEC) {\n                adjustedDeltaTime = Spring.MAX_DELTA_TIME_SEC\n              }\n\n              this._timeAccumulator += adjustedDeltaTime\n\n              var tension = this._springConfig.tension\n              var friction = this._springConfig.friction\n              var position = this._currentState.position\n              var velocity = this._currentState.velocity\n              var tempPosition = this._tempState.position\n              var tempVelocity = this._tempState.velocity\n              var aVelocity\n              var aAcceleration\n              var bVelocity\n              var bAcceleration\n              var cVelocity\n              var cAcceleration\n              var dVelocity\n              var dAcceleration\n              var dxdt\n              var dvdt\n\n              while (this._timeAccumulator >= Spring.SOLVER_TIMESTEP_SEC) {\n                this._timeAccumulator -= Spring.SOLVER_TIMESTEP_SEC\n\n                if (this._timeAccumulator < Spring.SOLVER_TIMESTEP_SEC) {\n                  this._previousState.position = position\n                  this._previousState.velocity = velocity\n                }\n\n                aVelocity = velocity\n                aAcceleration = tension * (this._endValue - tempPosition) - friction * velocity\n\n                tempPosition = position + aVelocity * Spring.SOLVER_TIMESTEP_SEC * 0.5\n                tempVelocity = velocity + aAcceleration * Spring.SOLVER_TIMESTEP_SEC * 0.5\n                bVelocity = tempVelocity\n                bAcceleration = tension * (this._endValue - tempPosition) - friction * tempVelocity\n\n                tempPosition = position + bVelocity * Spring.SOLVER_TIMESTEP_SEC * 0.5\n                tempVelocity = velocity + bAcceleration * Spring.SOLVER_TIMESTEP_SEC * 0.5\n                cVelocity = tempVelocity\n                cAcceleration = tension * (this._endValue - tempPosition) - friction * tempVelocity\n\n                tempPosition = position + cVelocity * Spring.SOLVER_TIMESTEP_SEC * 0.5\n                tempVelocity = velocity + cAcceleration * Spring.SOLVER_TIMESTEP_SEC * 0.5\n                dVelocity = tempVelocity\n                dAcceleration = tension * (this._endValue - tempPosition) - friction * tempVelocity\n\n                dxdt = 1.0 / 6.0 * (aVelocity + 2.0 * (bVelocity + cVelocity) + dVelocity)\n                dvdt = 1.0 / 6.0 * (aAcceleration + 2.0 * (bAcceleration + cAcceleration) + dAcceleration)\n\n                position += dxdt * Spring.SOLVER_TIMESTEP_SEC\n                velocity += dvdt * Spring.SOLVER_TIMESTEP_SEC\n              }\n\n              this._tempState.position = tempPosition\n              this._tempState.velocity = tempVelocity\n\n              this._currentState.position = position\n              this._currentState.velocity = velocity\n\n              if (this._timeAccumulator > 0) {\n                this._interpolate(this._timeAccumulator / Spring.SOLVER_TIMESTEP_SEC)\n              }\n\n              if (this.isAtRest() || this._overshootClampingEnabled && this.isOvershooting()) {\n                if (this._springConfig.tension > 0) {\n                  this._startValue = this._endValue\n                  this._currentState.position = this._endValue\n                } else {\n                  this._endValue = this._currentState.position\n                  this._startValue = this._endValue\n                }\n                this.setVelocity(0)\n                isAtRest = true\n              }\n\n              var notifyActivate = false\n              if (this._wasAtRest) {\n                this._wasAtRest = false\n                notifyActivate = true\n              }\n\n              var notifyAtRest = false\n              if (isAtRest) {\n                this._wasAtRest = true\n                notifyAtRest = true\n              }\n\n              this.notifyPositionUpdated(notifyActivate, notifyAtRest)\n            },\n\n            notifyPositionUpdated: function notifyPositionUpdated (notifyActivate, notifyAtRest) {\n              for (var i = 0, len = this.listeners.length; i < len; i++) {\n                var listener = this.listeners[i]\n                if (notifyActivate && listener.onSpringActivate) {\n                  listener.onSpringActivate(this)\n                }\n\n                if (listener.onSpringUpdate) {\n                  listener.onSpringUpdate(this)\n                }\n\n                if (notifyAtRest && listener.onSpringAtRest) {\n                  listener.onSpringAtRest(this)\n                }\n              }\n            },\n\n            // Check if the SpringSystem should advance. Springs are advanced\n            // a final frame after they reach equilibrium to ensure that the\n            // currentValue is exactly the requested endValue regardless of the\n            // displacement threshold.\n            systemShouldAdvance: function systemShouldAdvance () {\n              return !this.isAtRest() || !this.wasAtRest()\n            },\n\n            wasAtRest: function wasAtRest () {\n              return this._wasAtRest\n            },\n\n            // Check if the Spring is atRest meaning that it's currentValue and\n            // endValue are the same and that it has no velocity. The previously\n            // described thresholds for speed and displacement define the bounds\n            // of this equivalence check. If the Spring has 0 tension, then it will\n            // be considered at rest whenever its absolute velocity drops below the\n            // restSpeedThreshold.\n            isAtRest: function isAtRest () {\n              return Math.abs(this._currentState.velocity) < this._restSpeedThreshold && (this.getDisplacementDistanceForState(this._currentState) <= this._displacementFromRestThreshold || this._springConfig.tension === 0)\n            },\n\n            // Force the spring to be at rest at its current position. As\n            // described in the documentation for setCurrentValue, this method\n            // makes it easy to do synchronous non-animated updates to ui\n            // elements that are attached to springs via SpringListeners.\n            setAtRest: function setAtRest () {\n              this._endValue = this._currentState.position\n              this._tempState.position = this._currentState.position\n              this._currentState.velocity = 0\n              return this\n            },\n\n            _interpolate: function _interpolate (alpha) {\n              this._currentState.position = this._currentState.position * alpha + this._previousState.position * (1 - alpha)\n              this._currentState.velocity = this._currentState.velocity * alpha + this._previousState.velocity * (1 - alpha)\n            },\n\n            getListeners: function getListeners () {\n              return this.listeners\n            },\n\n            addListener: function addListener (newListener) {\n              this.listeners.push(newListener)\n              return this\n            },\n\n            removeListener: function removeListener (listenerToRemove) {\n              removeFirst(this.listeners, listenerToRemove)\n              return this\n            },\n\n            removeAllListeners: function removeAllListeners () {\n              this.listeners = []\n              return this\n            },\n\n            currentValueIsApproximately: function currentValueIsApproximately (value) {\n              return Math.abs(this.getCurrentValue() - value) <= this.getRestDisplacementThreshold()\n            }\n\n          })\n\n          // PhysicsState\n          // ------------\n          // **PhysicsState** consists of a position and velocity. A Spring uses\n          // this internally to keep track of its current and prior position and\n          // velocity values.\n          var PhysicsState = function PhysicsState () {}\n\n          util.extend(PhysicsState.prototype, {\n            position: 0,\n            velocity: 0\n          })\n\n          // SpringConfig\n          // ------------\n          // **SpringConfig** maintains a set of tension and friction constants\n          // for a Spring. You can use fromOrigamiTensionAndFriction to convert\n          // values from the [Origami](http://facebook.github.io/origami/)\n          // design tool directly to Rebound spring constants.\n          var SpringConfig = rebound.SpringConfig = function SpringConfig (tension, friction) {\n            this.tension = tension\n            this.friction = friction\n          }\n\n          // Loopers\n          // -------\n          // **AnimationLooper** plays each frame of the SpringSystem on animation\n          // timing loop. This is the default type of looper for a new spring system\n          // as it is the most common when developing UI.\n          var AnimationLooper = rebound.AnimationLooper = function AnimationLooper () {\n            this.springSystem = null\n            var _this = this\n            var _run = function _run () {\n              _this.springSystem.loop(Date.now())\n            }\n\n            this.run = function () {\n              util.onFrame(_run)\n            }\n          }\n\n          // **SimulationLooper** resolves the SpringSystem to a resting state in a\n          // tight and blocking loop. This is useful for synchronously generating\n          // pre-recorded animations that can then be played on a timing loop later.\n          // Sometimes this lead to better performance to pre-record a single spring\n          // curve and use it to drive many animations; however, it can make dynamic\n          // response to user input a bit trickier to implement.\n          rebound.SimulationLooper = function SimulationLooper (timestep) {\n            this.springSystem = null\n            var time = 0\n            var running = false\n            timestep = timestep || 16.667\n\n            this.run = function () {\n              if (running) {\n                return\n              }\n              running = true\n              while (!this.springSystem.getIsIdle()) {\n                this.springSystem.loop(time += timestep)\n              }\n              running = false\n            }\n          }\n\n          // **SteppingSimulationLooper** resolves the SpringSystem one step at a\n          // time controlled by an outside loop. This is useful for testing and\n          // verifying the behavior of a SpringSystem or if you want to control your own\n          // timing loop for some reason e.g. slowing down or speeding up the\n          // simulation.\n          rebound.SteppingSimulationLooper = function (timestep) {\n            this.springSystem = null\n            var time = 0\n\n            // this.run is NOOP'd here to allow control from the outside using\n            // this.step.\n            this.run = function () {}\n\n            // Perform one step toward resolving the SpringSystem.\n            this.step = function (timestep) {\n              this.springSystem.loop(time += timestep)\n            }\n          }\n\n          // Math for converting from\n          // [Origami](http://facebook.github.io/origami/) to\n          // [Rebound](http://facebook.github.io/rebound).\n          // You mostly don't need to worry about this, just use\n          // SpringConfig.fromOrigamiTensionAndFriction(v, v);\n          var OrigamiValueConverter = rebound.OrigamiValueConverter = {\n            tensionFromOrigamiValue: function tensionFromOrigamiValue (oValue) {\n              return (oValue - 30.0) * 3.62 + 194.0\n            },\n\n            origamiValueFromTension: function origamiValueFromTension (tension) {\n              return (tension - 194.0) / 3.62 + 30.0\n            },\n\n            frictionFromOrigamiValue: function frictionFromOrigamiValue (oValue) {\n              return (oValue - 8.0) * 3.0 + 25.0\n            },\n\n            origamiFromFriction: function origamiFromFriction (friction) {\n              return (friction - 25.0) / 3.0 + 8.0\n            }\n          }\n\n          // BouncyConversion provides math for converting from Origami PopAnimation\n          // config values to regular Origami tension and friction values. If you are\n          // trying to replicate prototypes made with PopAnimation patches in Origami,\n          // then you should create your springs with\n          // SpringSystem.createSpringWithBouncinessAndSpeed, which uses this Math\n          // internally to create a spring to match the provided PopAnimation\n          // configuration from Origami.\n          var BouncyConversion = rebound.BouncyConversion = function (bounciness, speed) {\n            this.bounciness = bounciness\n            this.speed = speed\n            var b = this.normalize(bounciness / 1.7, 0, 20.0)\n            b = this.projectNormal(b, 0.0, 0.8)\n            var s = this.normalize(speed / 1.7, 0, 20.0)\n            this.bouncyTension = this.projectNormal(s, 0.5, 200)\n            this.bouncyFriction = this.quadraticOutInterpolation(b, this.b3Nobounce(this.bouncyTension), 0.01)\n          }\n\n          util.extend(BouncyConversion.prototype, {\n\n            normalize: function normalize (value, startValue, endValue) {\n              return (value - startValue) / (endValue - startValue)\n            },\n\n            projectNormal: function projectNormal (n, start, end) {\n              return start + n * (end - start)\n            },\n\n            linearInterpolation: function linearInterpolation (t, start, end) {\n              return t * end + (1.0 - t) * start\n            },\n\n            quadraticOutInterpolation: function quadraticOutInterpolation (t, start, end) {\n              return this.linearInterpolation(2 * t - t * t, start, end)\n            },\n\n            b3Friction1: function b3Friction1 (x) {\n              return 0.0007 * Math.pow(x, 3) - 0.031 * Math.pow(x, 2) + 0.64 * x + 1.28\n            },\n\n            b3Friction2: function b3Friction2 (x) {\n              return 0.000044 * Math.pow(x, 3) - 0.006 * Math.pow(x, 2) + 0.36 * x + 2.0\n            },\n\n            b3Friction3: function b3Friction3 (x) {\n              return 0.00000045 * Math.pow(x, 3) - 0.000332 * Math.pow(x, 2) + 0.1078 * x + 5.84\n            },\n\n            b3Nobounce: function b3Nobounce (tension) {\n              var friction = 0\n              if (tension <= 18) {\n                friction = this.b3Friction1(tension)\n              } else if (tension > 18 && tension <= 44) {\n                friction = this.b3Friction2(tension)\n              } else {\n                friction = this.b3Friction3(tension)\n              }\n              return friction\n            }\n          })\n\n          util.extend(SpringConfig, {\n            // Convert an origami Spring tension and friction to Rebound spring\n            // constants. If you are prototyping a design with Origami, this\n            // makes it easy to make your springs behave exactly the same in\n            // Rebound.\n            fromOrigamiTensionAndFriction: function fromOrigamiTensionAndFriction (tension, friction) {\n              return new SpringConfig(OrigamiValueConverter.tensionFromOrigamiValue(tension), OrigamiValueConverter.frictionFromOrigamiValue(friction))\n            },\n\n            // Convert an origami PopAnimation Spring bounciness and speed to Rebound\n            // spring constants. If you are using PopAnimation patches in Origami, this\n            // utility will provide springs that match your prototype.\n            fromBouncinessAndSpeed: function fromBouncinessAndSpeed (bounciness, speed) {\n              var bouncyConversion = new rebound.BouncyConversion(bounciness, speed)\n              return this.fromOrigamiTensionAndFriction(bouncyConversion.bouncyTension, bouncyConversion.bouncyFriction)\n            },\n\n            // Create a SpringConfig with no tension or a coasting spring with some\n            // amount of Friction so that it does not coast infininitely.\n            coastingConfigWithOrigamiFriction: function coastingConfigWithOrigamiFriction (friction) {\n              return new SpringConfig(0, OrigamiValueConverter.frictionFromOrigamiValue(friction))\n            }\n          })\n\n          SpringConfig.DEFAULT_ORIGAMI_SPRING_CONFIG = SpringConfig.fromOrigamiTensionAndFriction(40, 7)\n\n          util.extend(SpringConfig.prototype, { friction: 0, tension: 0 })\n\n          // Here are a couple of function to convert colors between hex codes and RGB\n          // component values. These are handy when performing color\n          // tweening animations.\n          var colorCache = {}\n          util.hexToRGB = function (color) {\n            if (colorCache[color]) {\n              return colorCache[color]\n            }\n            color = color.replace('#', '')\n            if (color.length === 3) {\n              color = color[0] + color[0] + color[1] + color[1] + color[2] + color[2]\n            }\n            var parts = color.match(/.{2}/g)\n\n            var ret = {\n              r: parseInt(parts[0], 16),\n              g: parseInt(parts[1], 16),\n              b: parseInt(parts[2], 16)\n            }\n            colorCache[color] = ret\n            return ret\n          }\n\n          util.rgbToHex = function (r, g, b) {\n            r = r.toString(16)\n            g = g.toString(16)\n            b = b.toString(16)\n            r = r.length < 2 ? '0' + r : r\n            g = g.length < 2 ? '0' + g : g\n            b = b.length < 2 ? '0' + b : b\n            return '#' + r + g + b\n          }\n\n          var MathUtil = rebound.MathUtil = {\n            // This helper function does a linear interpolation of a value from\n            // one range to another. This can be very useful for converting the\n            // motion of a Spring to a range of UI property values. For example a\n            // spring moving from position 0 to 1 could be interpolated to move a\n            // view from pixel 300 to 350 and scale it from 0.5 to 1. The current\n            // position of the `Spring` just needs to be run through this method\n            // taking its input range in the _from_ parameters with the property\n            // animation range in the _to_ parameters.\n            mapValueInRange: function mapValueInRange (value, fromLow, fromHigh, toLow, toHigh) {\n              var fromRangeSize = fromHigh - fromLow\n              var toRangeSize = toHigh - toLow\n              var valueScale = (value - fromLow) / fromRangeSize\n              return toLow + valueScale * toRangeSize\n            },\n\n            // Interpolate two hex colors in a 0 - 1 range or optionally provide a\n            // custom range with fromLow,fromHight. The output will be in hex by default\n            // unless asRGB is true in which case it will be returned as an rgb string.\n            interpolateColor: function interpolateColor (val, startColor, endColor, fromLow, fromHigh, asRGB) {\n              fromLow = fromLow === undefined ? 0 : fromLow\n              fromHigh = fromHigh === undefined ? 1 : fromHigh\n              startColor = util.hexToRGB(startColor)\n              endColor = util.hexToRGB(endColor)\n              var r = Math.floor(util.mapValueInRange(val, fromLow, fromHigh, startColor.r, endColor.r))\n              var g = Math.floor(util.mapValueInRange(val, fromLow, fromHigh, startColor.g, endColor.g))\n              var b = Math.floor(util.mapValueInRange(val, fromLow, fromHigh, startColor.b, endColor.b))\n              if (asRGB) {\n                return 'rgb(' + r + ',' + g + ',' + b + ')'\n              } else {\n                return util.rgbToHex(r, g, b)\n              }\n            },\n\n            degreesToRadians: function degreesToRadians (deg) {\n              return deg * Math.PI / 180\n            },\n\n            radiansToDegrees: function radiansToDegrees (rad) {\n              return rad * 180 / Math.PI\n            }\n\n          }\n\n          util.extend(util, MathUtil)\n\n          // Utilities\n          // ---------\n          // Here are a few useful JavaScript utilities.\n\n          // Lop off the first occurence of the reference in the Array.\n          function removeFirst (array, item) {\n            var idx = array.indexOf(item)\n            idx !== -1 && array.splice(idx, 1)\n          }\n\n          var _onFrame\n          if (typeof window !== 'undefined') {\n            _onFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame || window.oRequestAnimationFrame || function (callback) {\n              window.setTimeout(callback, 1000 / 60)\n            }\n          }\n          if (!_onFrame && typeof process !== 'undefined' && process.title === 'node') {\n            _onFrame = setImmediate\n          }\n\n          // Cross browser/node timer functions.\n          util.onFrame = function onFrame (func) {\n            return _onFrame(func)\n          }\n\n          // Export the public api using exports for common js or the window for\n          // normal browser inclusion.\n          if (typeof exports !== 'undefined') {\n            util.extend(exports, rebound)\n          } else if (typeof window !== 'undefined') {\n            window.rebound = rebound\n          }\n        })()\n\n        const SETTINGS = {\n          rebound: {\n            tension: 14,\n            friction: 10\n          },\n          spinner: {\n            id: 'spinner',\n            radius: 90,\n            sides: 5,\n            depth: 8,\n            colors: {\n              background: '#00272C',\n              stroke: null,\n              base: null,\n              child: '#02C39A'\n            },\n            alwaysForward: true, // When false the spring will reverse normally.\n            restAt: null, // A number from 0.1 to 0.9 || null for full rotation\n            renderBase: false\n          }\n        }\n\n        // Legal Stuff\n        // -----------\n        /**\n         *  Copyright (c) 2013, Facebook, Inc.\n         *  All rights reserved.\n         *\n         *  This source code is licensed under the BSD-style license found in the\n         *  LICENSE file in the root directory of this source tree. An additional grant\n         *  of patent rights can be found in the PATENTS file in the same directory.\n         */\n\n        /**\n         * Polygon.\n         * Create a regular polygon and provide api to compute inscribed child.\n         */\n\n        var _createClass = (function () { function defineProperties (target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor) } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor } }())\n\n        var _classCallCheck = function _classCallCheck (instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError('Cannot call a class as a function')\n          }\n        }\n\n        var Polygon = (function () {\n          function Polygon () {\n            var radius = arguments.length <= 0 || arguments[0] === undefined ? 100 : arguments[0]\n            var sides = arguments.length <= 1 || arguments[1] === undefined ? 3 : arguments[1]\n            var depth = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2]\n            var colors = arguments[3]\n\n            _classCallCheck(this, Polygon)\n\n            this._radius = radius\n            this._sides = sides\n            this._depth = depth\n            this._colors = colors\n\n            this._x = 0\n            this._y = 0\n\n            this.rotation = 0\n            this.scale = 1\n\n            // Get basePolygon points straight away.\n            this.points = this._getRegularPolygonPoints()\n          }\n\n          /**\n           * Get the points of any regular polygon based on\n           * the number of sides and radius.\n           */\n\n          _createClass(Polygon, [{\n            key: '_getRegularPolygonPoints',\n            value: function _getRegularPolygonPoints () {\n              var points = []\n              var i = 0\n\n              while (i < this._sides) {\n                // Note that sin and cos are inverted in order to draw\n                // polygon pointing down like: ∇\n                var x = -this._radius * Math.sin(i * 2 * Math.PI / this._sides)\n                var y = this._radius * Math.cos(i * 2 * Math.PI / this._sides)\n\n                points.push({ x: x, y: y })\n\n                i++\n              }\n\n              return points\n            }\n\n            /**\n             * Get the inscribed polygon points by calling `getInterpolatedPoint`\n             * for the points (start, end) of each side.\n             */\n\n          }, {\n            key: '_getInscribedPoints',\n            value: function _getInscribedPoints (points, progress) {\n              var _this = this\n\n              var inscribedPoints = []\n\n              points.forEach(function (item, i) {\n                var start = item\n                var end = points[i + 1]\n\n                if (!end) {\n                  end = points[0]\n                }\n\n                var point = _this._getInterpolatedPoint(start, end, progress)\n\n                inscribedPoints.push(point)\n              })\n\n              return inscribedPoints\n            }\n\n            /**\n             * Get interpolated point using linear interpolation\n             * on x and y axis.\n             */\n\n          }, {\n            key: '_getInterpolatedPoint',\n            value: function _getInterpolatedPoint (start, end, progress) {\n              var Ax = start.x\n              var Ay = start.y\n\n              var Bx = end.x\n              var By = end.y\n\n              // Linear interpolation formula:\n              // point = start + (end - start) * progress;\n              var Cx = Ax + (Bx - Ax) * progress\n              var Cy = Ay + (By - Ay) * progress\n\n              return {\n                x: Cx,\n                y: Cy\n              }\n            }\n\n            /**\n             * Update children points array.\n             */\n\n          }, {\n            key: '_getUpdatedChildren',\n            value: function _getUpdatedChildren (progress) {\n              var children = []\n\n              for (var i = 0; i < this._depth; i++) {\n                // Get basePolygon points on first lap\n                // then get previous child points.\n                var points = children[i - 1] || this.points\n\n                var inscribedPoints = this._getInscribedPoints(points, progress)\n\n                children.push(inscribedPoints)\n              }\n\n              return children\n            }\n\n            /**\n             * Render children, first update children array,\n             * then loop and draw each child.\n             */\n\n          }, {\n            key: 'renderChildren',\n            value: function renderChildren (context, progress) {\n              var _this2 = this\n              var children = this._getUpdatedChildren(progress)\n\n              // child = array of points at a certain progress over the parent sides.\n              children.forEach(function (points, i) {\n                // Draw child.\n                context.beginPath()\n                points.forEach(function (point) {\n                  return context.lineTo(point.x, point.y)\n                })\n                context.closePath()\n\n                // Set colors.\n                var strokeColor = _this2._colors.stroke\n                var childColor = _this2._colors.child\n\n                if (strokeColor) {\n                  context.strokeStyle = strokeColor\n                  context.stroke()\n                }\n\n                if (childColor) {\n                  var rgb = rebound.util.hexToRGB(childColor)\n\n                  var alphaUnit = 1 / children.length\n                  var alpha = alphaUnit + alphaUnit * i\n\n                  var rgba = 'rgba(' + rgb.r + ', ' + rgb.g + ', ' + rgb.b + ', ' + alpha + ')'\n\n                  context.fillStyle = rgba\n\n                  // Set Shadow.\n                  context.shadowColor = 'rgba(0,0,0, 0.1)'\n                  context.shadowBlur = 10\n                  context.shadowOffsetX = 0\n                  context.shadowOffsetY = 0\n\n                  context.fill()\n                }\n              })\n            }\n\n            /**\n             * Render.\n             */\n\n          }, {\n            key: 'render',\n            value: function render (context) {\n              context.save()\n\n              context.translate(this._x, this._y)\n\n              if (this.rotation !== 0) {\n                context.rotate(rebound.MathUtil.degreesToRadians(this.rotation))\n              }\n\n              if (this.scale !== 1) {\n                context.scale(this.scale, this.scale)\n              }\n\n              // Draw basePolygon.\n              context.beginPath()\n              this.points.forEach(function (point) {\n                return context.lineTo(point.x, point.y)\n              })\n              context.closePath()\n\n              // Set colors.\n              var strokeColor = this._colors.stroke\n              var childColor = this._colors.base\n\n              if (strokeColor) {\n                context.strokeStyle = strokeColor\n                context.stroke()\n              }\n\n              if (childColor) {\n                context.fillStyle = childColor\n                context.fill()\n              }\n\n              context.restore()\n            }\n          }])\n\n          return Polygon\n        }())\n\n        /**\n         * Spinner.\n         * Create a canvas element, append it to the body, render polygon with\n         * inscribed children, provide init and complete methods to control spinner.\n         */\n        var completedAnimationOk = false\n        // var _createClass = (function () { function defineProperties (target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor) } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor } }())\n\n        var Spinner = (function () {\n          function Spinner (params) {\n            _classCallCheck(this, Spinner)\n\n            // var id = params.id\n            var radius = params.radius\n            var sides = params.sides\n            var depth = params.depth\n            var colors = params.colors\n            var alwaysForward = params.alwaysForward\n            var restAt = params.restAt\n            var renderBase = params.renderBase\n\n            if (sides < 3) {\n              // console.warn('At least 3 sides required.')\n              sides = 3\n            }\n\n            this._canvas = document.createElement('canvas')\n            this._canvas.style.backgroundColor = colors.background\n\n            this._canvasW = null\n            this._canvasH = null\n            this._canvasOpacity = 1\n\n            this._centerX = null\n            this._centerY = null\n\n            this._alwaysForward = alwaysForward\n            this._restThreshold = restAt\n            this._renderBase = renderBase\n\n            this._springRangeLow = 0\n            this._springRangeHigh = this._restThreshold || 1\n\n            // Instantiate basePolygon.\n            this._basePolygon = new Polygon(radius, sides, depth, colors)\n\n            this._progress = 0\n\n            this._isAutoSpin = null\n            this._isCompleting = null\n            this.CompletedAnimation = null\n          }\n\n          /**\n           * Init spinner.\n           */\n          _createClass(Spinner, [{\n            key: 'init',\n            value: function init (spring, autoSpin) {\n              this._addCanvas()\n\n              this._spring = spring\n              this._addSpringListener()\n\n              this._isAutoSpin = autoSpin\n\n              if (autoSpin) {\n                // Start auto spin.\n                this._spin()\n              } else {\n                // Render first frame only.\n                this._spring.setEndValue(0)\n                this.render()\n              }\n            }\n          }, {\n            key: '_addCanvas',\n            value: function _addCanvas () {\n              document.body.appendChild(this._canvas)\n              this._context = this._canvas.getContext('2d')\n              this._setCanvasSize()\n            }\n          }, {\n            key: '_setCanvasSize',\n            value: function _setCanvasSize () {\n              this._canvasW = this._canvas.width = window.innerWidth\n              this._canvasH = this._canvas.height = window.innerHeight\n              this._canvas.style.position = 'fixed'\n              this._canvas.style.top = 0\n              this._canvas.style.left = 0\n              this._canvas.style.zIndex = '15'\n\n              this._centerX = this._canvasW / 2\n              this._centerY = this._canvasH / 2\n            }\n          }, {\n            key: '_addSpringListener',\n            value: function _addSpringListener () {\n              var ctx = this\n              ctx.globalAlpha = 1\n              // Add a listener to the spring. Every time the physics\n              // solver updates the Spring's value onSpringUpdate will\n              // be called.\n              this._spring.addListener({\n                onSpringUpdate: function onSpringUpdate (spring) {\n                  var val = spring.getCurrentValue()\n\n                  // Input range in the `from` parameters.\n                  var fromLow = 0\n                  var fromHigh = 1\n\n                  // Property animation range in the `to` parameters.\n                  var toLow = ctx._springRangeLow\n                  var toHigh = ctx._springRangeHigh\n\n                  val = rebound.MathUtil.mapValueInRange(val, fromLow, fromHigh, toLow, toHigh)\n\n                  // Note that the render method is\n                  // called with the spring motion value.\n                  ctx.render(val)\n                }\n              })\n            }\n\n            /**\n             * Start complete animation.\n             */\n\n          }, {\n            key: 'setComplete',\n            value: function setComplete () {\n              this._isCompleting = true\n            }\n          }, {\n            key: '_completeAnimation',\n            value: function _completeAnimation () {\n              // Fade out the canvas.\n              this._canvasOpacity -= 0.1\n              this._canvas.style.opacity = this._canvasOpacity\n              // Stop animation and remove canvas.\n              if (this._canvasOpacity <= 0) {\n                this._isAutoSpin = false\n                this._spring.setAtRest()\n                this._canvas.remove()\n                completedAnimationOk = true\n                return completedAnimationOk\n              }\n            }\n\n            /**\n             * Spin animation.\n             */\n\n          }, {\n            key: '_spin',\n            value: function _spin () {\n              if (this._alwaysForward) {\n                var currentValue = this._spring.getCurrentValue()\n\n                // Switch the animation range used to compute the value\n                // in the `onSpringUpdate`, so to change the reverse animation\n                // of the spring at a certain threshold.\n                if (this._restThreshold && currentValue === 1) {\n                  this._switchSpringRange()\n                }\n\n                // In order to keep the motion going forward\n                // when spring reach 1 reset to 0 at rest.\n                if (currentValue === 1) {\n                  this._spring.setCurrentValue(0).setAtRest()\n                }\n              }\n\n              // Restart the spinner.\n              this._spring.setEndValue(this._spring.getCurrentValue() === 1 ? 0 : 1)\n            }\n          }, {\n            key: '_switchSpringRange',\n            value: function _switchSpringRange () {\n              var threshold = this._restThreshold\n\n              this._springRangeLow = this._springRangeLow === threshold ? 0 : threshold\n              this._springRangeHigh = this._springRangeHigh === threshold ? 1 : threshold\n            }\n\n            /**\n             * Render.\n             */\n\n          }, {\n            key: 'render',\n            value: function render (progress) {\n              // Update progess if present and round to 4th decimal.\n              if (progress) {\n                this._progress = Math.round(progress * 10000) / 10000\n              }\n\n              // Restart the spin.\n              if (this._isAutoSpin && this._spring.isAtRest()) {\n                this._spin()\n              }\n\n              // Complete the animation.\n              if (this._isCompleting) {\n                this._completeAnimation()\n              }\n\n              // Clear canvas and save context.\n              this._context.clearRect(0, 0, this._canvasW, this._canvasH)\n              this._context.save()\n\n              // Move to center.\n              this._context.translate(this._centerX, this._centerY)\n\n              this._context.lineWidth = 1.5\n\n              // Render basePolygon.\n              if (this._renderBase) {\n                this._basePolygon.render(this._context)\n              }\n\n              // Render inscribed polygons.\n              this._basePolygon.renderChildren(this._context, this._progress)\n\n              this._context.restore()\n            }\n          }])\n\n          return Spinner\n        }())\n\n        // Custom SETTINGS for each demo in related index.html\n\n        var settings = SETTINGS || {\n          rebound: {\n            tension: 2,\n            friction: 5\n          },\n          spinner: {\n            radius: 80,\n            sides: 3,\n            depth: 4,\n            colors: {\n              background: '#000000',\n              stroke: '#000000',\n              base: '#222222',\n              child: '#FFFFFF'\n            },\n            alwaysForward: true, // When false the spring will reverse normally.\n            restAt: 0.5, // A number from 0.1 to 0.9 || null for full rotation\n            renderBase: true // Optionally render basePolygon\n          }\n        }\n\n        /**\n         * Demo.\n         */\n        var demo = {\n          settings: settings,\n\n          spring: null,\n          spinner: null,\n\n          /**\n           * Initialize Rebound.js with settings.\n           * Rebound is used to generate a spring which\n           * is then used to animate the spinner.\n           * See more: http://facebook.github.io/rebound-js/docs/rebound.html\n           */\n          initRebound: function initRebound () {\n            var settings = demo.settings.rebound\n\n            // Create a SpringSystem.\n            var springSystem = new rebound.SpringSystem()\n\n            // Add a spring to the system.\n            demo.spring = springSystem.createSpring(settings.tension, settings.friction)\n          },\n\n          /**\n           * Initialize Spinner with settings.\n           */\n          initSpinner: function initSpinner () {\n            var settings = demo.settings.spinner\n\n            // Instantiate Spinner.\n            demo.spinner = new Spinner(settings)\n          },\n\n          /**\n           * Initialize demo.\n           */\n          init: function init () {\n            var spinnerTypeAutoSpin = true\n\n            // Instantiate animation engine and spinner system.\n            demo.initRebound()\n            demo.initSpinner()\n\n            // Init animation with Rebound Spring System.\n            demo.spinner.init(demo.spring, spinnerTypeAutoSpin)\n          },\n\n          /**\n           * Ajax Request.\n           */\n          loadSomething: function loadSomething () {\n            var oReq = new XMLHttpRequest()\n\n            oReq.addEventListener('progress', function (oEvent) {\n              if (oEvent.lengthComputable) {\n                var percent = Math.ceil(oEvent.loaded / oEvent.total * 100)\n\n                // By setting the end value with the actual loading percentage\n                // the spinner will progress based on the actual ajax loading time.\n                demo.spring.setEndValue(percent * 0.01)\n              }\n            })\n\n            oReq.addEventListener('load', function (e) {\n              // Complete the loading animation.\n              demo.spinner.setComplete()\n            })\n\n            oReq.open('GET', '/img/something.jpg')\n            oReq.send()\n          }\n        }\n        // # sourceMappingURL=main.js.map\n      }\n      return {\n        restrict: 'E',\n        scope: {\n          start: '=start',\n          stop: '=stop'\n        },\n        controller: ['$scope', function ($scope) {\n          $scope.start = function () {\n            demo.init()\n          }\n          $scope.stop = function () {\n            demo.spinner.setComplete()\n          }\n        }]\n      }\n    }\n  ])\n})();// eslint-disable-line semi\n","(function () {\n  'use strict'\n  var module = angular.module('ProblemsTest')\n\n  module.directive('myInputPosteDa', [\n    function () {\n      return {\n        restrict: 'E',\n        scope: {\n          val: '=val',\n          label: '@label',\n          onclick: '=onclick'\n        },\n        templateUrl: '/component/input-poste-da/input-poste-da.html',\n        controller: function ($scope) {\n        }\n      }\n    }\n  ])\n})();// eslint-disable-line semi\n","(function () {\n  'use strict'\n  var module = angular.module('ProblemsTest')\n\n  module.directive('myRadiolistProblems', ['configMessages', function (configMessages) {\n    return {\n      restrict: 'E',\n      scope: {\n        problems: '=problemsType',\n        ondatachange: '=ondatachange',\n        itemId: '=idvalue'\n      },\n      templateUrl: '/component/radiolist-problems/radiolist-problems.html'\n    }\n  }])\n})();// eslint-disable-line semi\n","(function () {\n  'use strict'\n  var module = angular.module('ProblemsTest')\n\n  var configConnexionServer = {\n    port: '8080',\n    server: 'localhost'\n  }\n\n  module.constant('serverConnexion', configConnexionServer)\n})();// eslint-disable-line semi\n","(function () {\n  'use strict'\n  var module = angular.module('ProblemsTest')\n\n  var configMessages = {\n    problems: 'problems',\n    typeProbleme: 'typeProbleme',\n    repeatProblems: 'x in problems',\n    valueProblem: '{{x.typeProblems}}',\n    valueDuree: '{{x.duree}}'\n  }\n\n  module.constant('configMessages', configMessages)\n})();// eslint-disable-line semi\n","(function () {\n  'use strict'\n  var module = angular.module('ProblemsTest')\n\n  module.config(['$routeProvider', function ($routeProvider) {\n    $routeProvider\n      .when('/', {\n        templateUrl: 'view/home.html',\n        controller: 'ProblemsController'\n      })\n      .when('/poste-da', {\n        templateUrl: 'view/poste-da.html',\n        controller: 'PosteDaController'\n      })\n      .when('/types-problems', {\n        templateUrl: 'view/types-problems.html',\n        controller: 'ProblemsTypeController'\n      })\n      .when('/all-problems', {\n        templateUrl: 'view/all-problems.html',\n        controller: 'AllProblemsController'\n      })\n      .otherwise({\n        redirectTo: '/'\n      })\n  }])\n})();// eslint-disable-line semi\n","(function () {\n  'use strict'\n  var module = angular.module('ProblemsTest')\n\n  module.config(['$translateProvider', function ($translateProvider) {\n    $translateProvider.translations('fr', {\n      'HOME-MESSAGE': '',\n\n      'PROBLEMS-TITLE': 'Ajouter un problème',\n      'PROBLEMS-TYPE-TITLE': 'Ajouter un type de problème',\n      'POSTES-DA-TITLE': 'Gérer les postes Dassault',\n\n      'PATH-POSTE-DA': '/poste-da',\n      'PATH-PROBLEMS': '/',\n\n      'SECONDS-UNIT': 's',\n      'MINUTES-UNIT': 'm',\n      'HOURS-UNIT': 'h',\n\n      'SECONDS-DURATION': 'secondes',\n      'MINUTES-DURATION': 'minutes',\n      'HOURS-DURATION': 'heures',\n\n      'PROBLEM-USER': 'User',\n      'PROBLEM-NUM-POSTE-DA': 'Numéro de poste Dassault',\n      'PROBLEM-ADRESS-IP': 'Adresse IP',\n      'PROBLEM-DURATION': 'Durée',\n      'PROBLEM-COMMENT': 'Commentaires',\n\n      'SUCCESS-MESSAGE': 'Ajouté !',\n      'ERROR-MESSAGE-VOID-POSTE': 'Veuillez remplir le numéro de poste Dassault',\n\n      'FOOTER-MESSAGE': '© 2016 Repertoire de problèmes - Marion Gourlaouen'\n    })\n\n    $translateProvider.preferredLanguage('fr')\n    $translateProvider.useSanitizeValueStrategy('escape')\n  }])\n})();// eslint-disable-line semi\n","(function () {\n  'use strict'\n  var module = angular.module('ProblemsTest')\n\n  module.controller('AllProblemsController', [\n    '$scope',\n    'ProblemsService',\n    'ProblemsTypeService',\n    'PosteDaService',\n    function ($scope, ProblemsService, ProblemsTypeService, PosteDaService) {\n      var initialValue = 2\n      $scope.problemType\n      $scope.duration\n      $scope.comment\n      $scope.problemId\n      $scope.comment\n      $scope.user\n      $scope.numPosteDa = []\n      $scope.adresseIPSopra\n      $scope.problems = []\n      $scope.date = Date.now()\n\n      ProblemsService.getAllProblems().then(function (problems) {\n        $scope.problems = problems\n        $scope.problemIndex = initialValue\n        $scope.problemType = $scope.problems[initialValue].typeProbleme\n        $scope.duration = $scope.problems[initialValue].duree\n        // $scope.setduration($scope.duration)\n        $scope.comment = ''\n        $scope.user = ''\n        $scope.numPosteDa = ''\n        $scope.adresseIPSopra = '172.50.3.54'\n      })\n      .catch(function (err) {\n        alert('Erreur')\n        console.log(err)\n      })\n\n      $scope.ontypechange = function (type) {\n        $scope.problemType = type.typeProbleme\n        $scope.duration = type.duree\n        $scope.setduration($scope.duration)\n      }\n\n      $scope.onsubmit = function () {\n        var objectToSend = {\n          typeProbleme: $scope.problemType,\n          duree: $scope.duration,\n          commentaire: $scope.comment,\n          user: $scope.user,\n          numPosteDA: $scope.numPosteDa,\n          adresseIPSopra: $scope.adresseIPSopra,\n          date: $scope.date\n        }\n        $scope.start()\n\n        setTimeout(function () {\n          ProblemsService\n          .createProblem(objectToSend)\n          .then(function (problems) {\n            $scope.stop()\n            alert('Well inserted')\n          })\n          .catch(function (err) {\n            $scope.stop()\n            alert('Erreur')\n            console.log(err)\n          })\n        }, 5000)\n      }\n    }\n  ])\n})();// eslint-disable-line semi\n","(function () {\n  'use strict'\n  var module = angular.module('ProblemsTest')\n\n  module.controller('PosteDaController', [\n    '$scope',\n    '$location',\n    'PosteDaService',\n    function ($scope, $location, PosteDaService) {\n      $scope.postesDa = []\n      $scope.numPosteDa\n\n      PosteDaService.getPostesDa().then(function (posteDa) {\n        $scope.postesDa = posteDa\n      })\n      .catch(function (err) {\n        alert('Erreur')\n        console.log(err)\n      })\n\n      $scope.onclick = function () {\n        var objectToSend = {\n          numPosteDA: $scope.numPosteDa\n        }\n        if (objectToSend.numPosteDA === undefined) {\n          alert('Veuillez remplir le numéro de poste Dassault')\n          return\n        }\n        PosteDaService.createPosteDa(objectToSend)\n        .then(function (posteDa) {\n          alert('Well inserted')\n          $scope.postesDa.push(objectToSend)\n        })\n        .catch(function (err) {\n          alert('Erreur')\n          console.log(err)\n        })\n      }\n\n      $scope.ondelete = function (type) {\n        var objectToDelete = {\n          numPosteDA: type.numPosteDA,\n          id: type.id\n        }\n        $scope.start()\n        setTimeout(function () {\n          PosteDaService.deletePosteDa(objectToDelete).then(function (posteDa) {\n            $scope.stop()\n            alert('Well deleted')\n            location.reload()\n          })\n          .catch(function (err) {\n            $scope.stop()\n            alert('Erreur')\n            console.log(err)\n          })\n        }, 3000)\n      }\n\n      $scope.goToRacePage = function () {\n        $location.path('/poste-da')\n      }\n    }\n  ])\n})();// eslint-disable-line semi\n","(function () {\n  'use strict'\n  var module = angular.module('ProblemsTest')\n\n  module.controller('ProblemsController', [\n    '$scope',\n    'ProblemsService',\n    'ProblemsTypeService',\n    'PosteDaService',\n    function ($scope, ProblemsService, ProblemsTypeService, PosteDaService) {\n      var initialValue = 2\n      $scope.problemType\n      $scope.duration\n      $scope.comment\n      $scope.problemId\n      $scope.comment\n      $scope.user\n      $scope.numPosteDa\n      $scope.postesDa = []\n      $scope.adresseIPSopra\n      $scope.problems = []\n      $scope.date = Date.now()\n\n      ProblemsTypeService.getProblemsType().then(function (problems) {\n        $scope.problems = problems\n        $scope.problemIndex = initialValue\n        $scope.problemType = $scope.problems[initialValue].typeProbleme\n        $scope.duration = $scope.problems[initialValue].duree\n        $scope.setduration($scope.duration)\n        $scope.comment = ''\n        $scope.user = ''\n        $scope.numPosteDa = ''\n        $scope.adresseIPSopra = '172.50.3.54'\n\n        return PosteDaService.getPostesDa()\n      })\n      .catch(function (err) {\n        alert('Erreur')\n        console.log(err)\n      }).then(function (posteDa) {\n        $scope.postesDa = posteDa\n      })\n      .catch(function (err) {\n        alert('Erreur')\n        console.log(err)\n      })\n\n      $scope.ontypechange = function (type) {\n        $scope.problemType = type.typeProbleme\n        $scope.duration = type.duree\n        $scope.setduration($scope.duration)\n      }\n\n      $scope.onsubmit = function () {\n        var objectToSend = {\n          typeProbleme: $scope.problemType,\n          duree: $scope.duration,\n          commentaire: $scope.comment,\n          user: $scope.user,\n          numPosteDA: ($scope.numPosteDa).numPosteDA,\n          adresseIPSopra: $scope.adresseIPSopra,\n          date: $scope.date\n        }\n        $scope.start()\n\n        setTimeout(function () {\n          ProblemsService\n          .createProblem(objectToSend)\n          .then(function (problems) {\n            $scope.stop()\n            alert('Well inserted')\n          })\n          .catch(function (err) {\n            $scope.stop()\n            alert('Erreur')\n            console.log(err)\n          })\n        }, 5000)\n      }\n    }\n  ])\n})();// eslint-disable-line semi\n","(function () {\n  'use strict'\n  var module = angular.module('ProblemsTest')\n\n  module.controller('ProblemsTypeController', [\n    '$scope',\n    'ProblemsTypeService',\n    'TimeService',\n    function ($scope, ProblemsTypeService, TimeService) {\n      var initialValue = 2\n      $scope.problemType\n      $scope.duration\n      $scope.problemId\n      $scope.problems = []\n\n      ProblemsTypeService.getProblemsType().then(function (problems) {\n        $scope.problems = problems\n        $scope.problemIndex = initialValue\n        $scope.problemType = $scope.problems[initialValue].typeProbleme\n        $scope.duration = $scope.problems[initialValue].duree\n      })\n      .catch(function (err) {\n        alert('Erreur')\n        console.log(err)\n      })\n\n      $scope.setvalue = function (duration) {\n        $scope.unit = TimeService.getTimeUnit(duration)\n        $scope.displaytime = TimeService.computeDisplayTime(duration, $scope.unit)\n      }\n\n      $scope.oncreationtypeproblem = function () {\n        var objectToSend = {\n          typeProbleme: $scope.problemTypeCreation,\n          duree: $scope.durationCreation\n        }\n\n        setTimeout(function () {\n          ProblemsTypeService\n          .createProblemType(objectToSend)\n          .then(function (problems) {\n            alert('Well inserted')\n          })\n          .catch(function (err) {\n            alert('Erreur')\n            console.log(err)\n          })\n        }, 5000)\n      }\n    }\n  ])\n})();// eslint-disable-line semi\n","(function () {\n  'use strict'\n  var module = angular.module('ProblemsTest')\n  module.service('CheckNumberService',\n    function () {\n      this.isNormalInteger = function (str) {\n        return /^\\\\?(0|[1-9]\\d*)$/.test(str)\n      }\n    })\n})();// eslint-disable-line no-alert, quotes, semi\n","(function () {\n  'use strict'\n  var module = angular.module('ProblemsTest')\n\n  module.service('CsvService', [\n    '$q',\n    '$http',\n    'serverConnexion',\n    function ($q, $http, serverConnexion) {\n      var ressourceNameRetrieveCsv = 'CSV'\n      var apiUrlProblems = 'http://' + serverConnexion.server + ':' + serverConnexion.port + '/' + ressourceNameRetrieveCsv\n      this.retrieveCsv = function () {\n        var deferred = $q.defer()\n        $http.get(apiUrlProblems)\n          .then(function (httpInfo) {\n            deferred.resolve(httpInfo)\n          })\n          .catch(function (err) {\n            deferred.reject(err)\n          })\n        return deferred.promise\n      }\n    }\n  ])\n})();// eslint-disable-line semi\n","(function () {\n  'use strict'\n  var module = angular.module('ProblemsTest')\n\n  module.service('PosteDaService', [\n    '$q',\n    '$http',\n    'serverConnexion',\n    function ($q, $http, serverConnexion) {\n      var ressourceNamePosteDa = 'postesDA'\n      var apiUrlPosteDa = 'http://' + serverConnexion.server + ':' + serverConnexion.port + '/' + ressourceNamePosteDa\n\n      this.getPostesDa = function () {\n        var deferred = $q.defer()\n        $http.get(apiUrlPosteDa)\n          .then(function (httpInfo) {\n            deferred.resolve(httpInfo.data)\n          })\n          .catch(function (err) {\n            deferred.reject(err)\n          })\n        return deferred.promise\n      }\n\n      this.createPosteDa = function (data) {\n        var deferred = $q.defer()\n        $http.post(apiUrlPosteDa, data)\n          .then(function (httpInfo) {\n            deferred.resolve(httpInfo.data)\n          })\n          .catch(function (err) {\n            deferred.reject(err)\n          })\n        return deferred.promise\n      }\n\n      this.deletePosteDa = function (data) {\n        var deferred = $q.defer()\n        var numPosteDaId = data.id\n        var urlDeleteNumPosteDa = apiUrlPosteDa + '/' + numPosteDaId\n        $http.delete(urlDeleteNumPosteDa)\n          .then(function (httpInfo) {\n            deferred.resolve(httpInfo.data)\n          })\n          .catch(function (err) {\n            deferred.reject(err)\n          })\n        return deferred.promise\n      }\n    }\n  ])\n})();// eslint-disable-line no-alert, quotes, semi\n\n","(function () {\n  'use strict'\n  var module = angular.module('ProblemsTest')\n\n  module.service('ProblemsService', [\n    '$q',\n    '$http',\n    'serverConnexion',\n    function ($q, $http, serverConnexion) {\n      var ressourceNameCreateProblem = 'problems'\n      var apiUrlProblems = 'http://' + serverConnexion.server + ':' + serverConnexion.port + '/' + ressourceNameCreateProblem\n      this.createProblem = function (data) {\n        var deferred = $q.defer()\n        $http.post(apiUrlProblems, data)\n          .then(function (httpInfo) {\n            deferred.resolve(httpInfo.data)\n          })\n          .catch(function (err) {\n            deferred.reject(err)\n          })\n        return deferred.promise\n      }\n\n      this.getAllProblems = function () {\n        var deferred = $q.defer()\n        $http.get(apiUrlProblems)\n          .then(function (httpInfo) {\n            deferred.resolve(httpInfo.data)\n          })\n          .catch(function (err) {\n            deferred.reject(err)\n          })\n        return deferred.promise\n      }\n    }\n  ])\n})();// eslint-disable-line no-alert, quotes, semi\n","(function () {\n  'use strict'\n  var module = angular.module('ProblemsTest')\n\n  module.service('ProblemsTypeService', [\n    '$q',\n    '$http',\n    'serverConnexion',\n    function ($q, $http, serverConnexion) {\n      var ressourceNameGetProblems = 'problemsTypes'\n      var apiUrlTypeProblems = 'http://' + serverConnexion.server + ':' + serverConnexion.port + '/' + ressourceNameGetProblems\n      this.getProblemsType = function () {\n        var deferred = $q.defer()\n        $http.get(apiUrlTypeProblems)\n          .then(function (httpInfo) {\n            deferred.resolve(httpInfo.data)\n          })\n          .catch(function (err) {\n            deferred.reject(err)\n          })\n        return deferred.promise\n      }\n\n      this.createProblemType = function (data) {\n        var deferred = $q.defer()\n        $http.post(apiUrlTypeProblems, data)\n          .then(function (httpInfo) {\n            deferred.resolve(httpInfo.data)\n          })\n          .catch(function (err) {\n            deferred.reject(err)\n          })\n        return deferred.promise\n      }\n\n      this.deleteProblemType = function (data) {\n        var deferred = $q.defer()\n        var ProblemTypeId = data.id\n        var urlDeleteProblemType = apiUrlTypeProblems + '/' + ProblemTypeId\n        $http.delete(urlDeleteProblemType)\n          .then(function (httpInfo) {\n            deferred.resolve(httpInfo.data)\n          })\n          .catch(function (err) {\n            deferred.reject(err)\n          })\n        return deferred.promise\n      }\n    }\n  ])\n})();// eslint-disable-line no-alert, quotes, semi\n","(function () {\n  'use strict'\n  var module = angular.module('ProblemsTest')\n\n  var configUnitTime = {\n    seconds: 's',\n    minutes: 'm',\n    hours: 'h'\n  }\n\n  module.service('TimeService',\n    function () {\n      this.getTimeUnit = function (duration) {\n        var unit\n        var invalidDuration = 'Duration is invalid'\n        if (!duration) {\n          throw invalidDuration\n        }\n\n        if (duration < 59999) {\n          unit = configUnitTime.seconds\n        } else if (duration < 3599999) {\n          unit = configUnitTime.minutes\n        } else {\n          unit = configUnitTime.hours\n        }\n        return unit\n      }\n\n      this.computeDisplayTime = function (duration, unit) {\n        var displaytime\n        var unknowUnit = 'Unknown unit'\n        switch (unit) {\n          case configUnitTime.seconds :\n            displaytime = Math.ceil(duration / 1000)\n            break\n          case configUnitTime.minutes :\n            displaytime = Math.ceil(duration / 60000)\n            break\n          case configUnitTime.hours :\n            displaytime = Math.ceil(duration / 3600000)\n            break\n          default :\n            throw unknowUnit\n        }\n        return displaytime\n      }\n\n      this.convertInMs = function (displaytime, unit) {\n        var duration\n        var unknownUnit = 'Unknown unit'\n        switch (unit) {\n          case configUnitTime.seconds :\n            duration = displaytime * 1000\n            break\n          case configUnitTime.minutes :\n            duration = displaytime * 60000\n            break\n          case configUnitTime.hours :\n            duration = displaytime * 3600000\n            break\n          default :\n            throw unknownUnit\n        }\n        return duration\n      }\n\n      this.keyisvalid = function (key) {\n        var numbers = '0123456789'\n        if (numbers.indexOf(key) !== -1 || key === 'Backspace') {\n          return true\n        } else {\n          return false\n        }\n      }\n    })\n})();// eslint-disable-line no-alert, quotes, semi\n"],"sourceRoot":"/source/"}